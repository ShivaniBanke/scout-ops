#!/bin/bash

# Example script showing how to use the real filesystem-scanning system

echo "=== main.jsonnet Entry Point with Real Directory Scanning ==="

echo "1. Deploy with automatic file discovery:"
echo "./deploy.sh stage platform api-gw"
echo ""

echo "2. Direct jsonnet execution (main.jsonnet entry point):"
echo "# Scan directories and pass file lists to main.jsonnet"
API_GW_FILES="\$(ls -1 environments/stage/platform/api-gw/*.jsonnet | xargs -n1 basename | tr '\n' ',')"
echo "jsonnet \\"
echo "  --ext-str ENVIRONMENT='stage' \\"
echo "  --ext-str TEAMS='platform' \\"
echo "  --ext-str SERVICES='api-gw' \\"
echo "  --ext-str STAGE_PLATFORM_API_GW_FILES='\$API_GW_FILES' \\"
echo "  --ext-str STAGE_PLATFORM_SLACK_URL='https://hooks.slack.com/platform-stage' \\"
echo "  main.jsonnet"

echo -e "\n3. Deploy multiple services with file discovery:"
echo "./deploy.sh stage 'platform,devops' 'api-gw,web-server'"
echo ""

echo "4. Real filesystem scanning example:"
echo "# This is what the deploy.sh script does internally:"
echo "find environments/stage/platform/api-gw -name '*.jsonnet' -type f"
echo "# Returns: alerts.jsonnet, cpu-alerts.jsonnet, 01-alerts.jsonnet, monitoring.jsonnet"
echo ""

echo "5. Using with Grizzly (real file scanning):"
echo "grizzly apply -J <(./deploy.sh stage platform api-gw)"

echo -e "\n=== Environment Variables Used ==="
echo "ENVIRONMENT: Target environment (stage/prod)"
echo "TEAMS: Comma-separated teams to deploy (platform,devops,security)"
echo "SERVICES: Comma-separated services to deploy (api-gw,database,redis)"
echo "{ENV}_{TEAM}_SLACK_URL: Team-specific Slack webhook"
echo "{ENV}_{TEAM}_PAGERDUTY_KEY: Team-specific PagerDuty key"
echo ""
echo "Examples:"
echo "- TEAMS='platform,devops'"
echo "- SERVICES='api-gw,database,redis,web-server'"
echo "- STAGE_PLATFORM_SLACK_URL"
echo "- PROD_DEVOPS_PAGERDUTY_KEY"

echo -e "\n=== What gets created (user-controlled) ==="
echo "For the specified ENVIRONMENT:"
echo "  - Environment overview folder"
echo "  For each specified TEAM:"
echo "    - Team-specific folder"
echo "    - Team contact points (Slack + PagerDuty)"
echo "    - Team notification policies"
echo "    For each specified SERVICE:"
echo "      - Service alert rule groups (all alert files discovered and combined)"
echo "      - Only creates resources for services that actually exist"

echo -e "\n=== Current Structure Discovered (Terraform-Like Scanning) ==="
echo "stage environment:"
echo "  ├── platform team (config.jsonnet)"
echo "  │   ├── api-gw service"
echo "  │   │   ├── alerts.jsonnet (2 alerts)"
echo "  │   │   ├── cpu-alerts.jsonnet (2 alerts)"  
echo "  │   │   ├── memory-alerts.jsonnet (2 alerts)"
echo "  │   │   ├── api-alerts.jsonnet (3 alerts)"
echo "  │   │   ├── contact-points.jsonnet (2 contact points)"
echo "  │   │   ├── notification-policies.jsonnet (2 policies)"
echo "  │   │   ├── 01-alerts.jsonnet (1 alert) [Terraform-style]"
echo "  │   │   ├── 02-contacts.jsonnet (1 contact point) [Terraform-style]"
echo "  │   │   └── monitoring.jsonnet (1 alert + 1 policy) [Mixed resources]"
echo "  │   │   Total: 11 alerts + 4 contact points + 3 policies"
echo "  │   ├── database service"
echo "  │   │   ├── db-alerts.jsonnet (2 alerts)"
echo "  │   │   ├── performance-alerts.jsonnet (2 alerts)"
echo "  │   │   └── contact-points.jsonnet (2 contact points)"  
echo "  │   │   Total: 4 alerts + 2 contact points"
echo "  │   └── redis service"
echo "  │       └── alerts.jsonnet (3 alerts)"
echo "  │       Total: 3 alerts"
echo "  └── devops team (config.jsonnet)"
echo "      └── web-server service"
echo "          ├── alerts.jsonnet (2 alerts)"
echo "          └── main.jsonnet (2 alerts + 1 contact point) [Terraform-style]"
echo "          Total: 4 alerts + 1 contact point"
echo ""
echo "🎯 TOTAL RESOURCES DISCOVERED: 22+ alerts, 7+ contact points, 3+ policies!"
echo "📁 ALL FILES AUTOMATICALLY DISCOVERED - No configuration needed!"

echo -e "\n=== Generic Resource System ==="
echo "✅ Teams and services specified by user (precise control)"
echo "✅ ALL resource types are discovered automatically for each service"  
echo "✅ Multiple resource files per service (alerts, contact-points, policies, etc.)"
echo "✅ Each service can have its own specialized resources"
echo "✅ Team configs define defaults, thresholds, and routing rules"
echo "✅ Validation ensures only existing teams/services are deployed"

echo -e "\n=== Terraform-Like Directory Scanning ==="
echo "The system works exactly like Terraform:"
echo "1. User specifies ENVIRONMENT, TEAMS, SERVICES"
echo "2. For each specified TEAM → validate it exists (has config.jsonnet)"
echo "3. For each specified SERVICE → scan directory for ALL .jsonnet files"
echo "4. For each .jsonnet file found → import and process whatever resources it contains"
echo "5. Create resources based on what's found (alertConfigs, contactPoints, etc.)"
echo "6. Just like Terraform - drop any .jsonnet file in a directory and it gets processed!"
echo ""
echo "Example .jsonnet files automatically discovered (any naming works!):"
echo ""
echo "TERRAFORM-STYLE NUMBERED FILES:"
echo "• 01-alerts.jsonnet, 02-contacts.jsonnet, 03-policies.jsonnet"
echo "• 10-monitoring.jsonnet, 20-dashboards.jsonnet, 30-datasources.jsonnet"
echo ""
echo "NATURAL NAMING:"
echo "• main.jsonnet (like Terraform's main.tf)"
echo "• monitoring.jsonnet, security.jsonnet, networking.jsonnet"
echo "• alerts.jsonnet, contacts.jsonnet, policies.jsonnet"
echo ""
echo "DESCRIPTIVE NAMES:"
echo "• api-gateway-monitoring.jsonnet, database-alerts.jsonnet"  
echo "• prod-critical-alerts.jsonnet, dev-testing-setup.jsonnet"
echo ""
echo "MIXED RESOURCES (like Terraform):"
echo "• One file can contain alerts, contacts, policies, dashboards - anything!"
echo "• Just like Terraform where one .tf file can have multiple resource types"
echo ""
echo "🎯 The system finds and processes ANY .jsonnet file you create!"